type: edu
custom_name: stage5
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/Machine.java
  visible: true
  text: |
    package machine;

    import java.util.List;

    public class Machine {

        private int water = 0;
        private int milk = 0;
        private int coffeeBeans = 0;
        private int cups = 0;
        private int money = 0;

        public void makeLatte() {
            if(water >= 350 && coffeeBeans >= 20 && milk >= 75) {
                water -= 350;
                coffeeBeans -= 20;
                milk -= 75;
                money += 7;
                cups--;
            }
        }

        public void makeEspresso() {
            if (water >= 250 && coffeeBeans >= 16) {
                water -= 250;
                coffeeBeans -= 16;
                money += 4;
                cups--;
            }
        }

        public void makeCappuccino() {
            if(water >= 200 && milk >= 100 && coffeeBeans >= 12) {
                water -= 200;
                milk -= 100;
                coffeeBeans -= 12;
                cups--;
                money += 6;
            }
        }

        public void fill(List<Integer> itemsToFill) {
            water += itemsToFill.get(0);
            milk += itemsToFill.get(1);
            coffeeBeans += itemsToFill.get(2);
            cups += itemsToFill.get(3);
        }

        public Machine(int water, int milk, int coffeeBeans, int cups, int money) {
            this.water = water;
            this.milk = milk;
            this.coffeeBeans = coffeeBeans;
            this.cups = cups;
            this.money = money;
        }

        public int getWater() {
            return water;
        }

        public int getMilk() {
            return milk;
        }

        public int getCoffeeBeans() {
            return coffeeBeans;
        }

        public int getCups() {
            return cups;
        }

        public int getMoney() {
            return money;
        }

        public void setMoney(int money) {
            this.money = money;
        }
    }
  learner_created: true
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {
        private static final MainMenu menu = new MainMenu();
        private static final Machine machine = new Machine(1200,540,120,9,550);
        public static void main(String[] args) {
    //        while(true) {
                menu.displayStatus(machine);
                String choice = menu.displayMenu();
                if (choice.toLowerCase().equals("buy")) {
                    int coffeeType = menu.chooseCoffee();
                    if (coffeeType == 1) {
                        machine.makeEspresso();
                    } else if (coffeeType == 2){
                        machine.makeLatte();
                    } else if (coffeeType == 3) {
                        machine.makeCappuccino();
                    }
                    menu.displayStatus(machine);
                } else if (choice.toLowerCase().equals("fill")) {
                    machine.fill(menu.fillMenu());
                    menu.displayStatus(machine);
                } else if (choice.toLowerCase().equals("take")) {
                    menu.takeMoney(machine);
                    menu.displayStatus(machine);
                }


        }
    }
  learner_created: true
- name: src/machine/MainMenu.java
  visible: true
  text: |
    package machine;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class MainMenu {

        private static  final Scanner scanner = new Scanner(System.in);

        public String displayMenu() {
            System.out.println("Write action (buy, fill, take):");
            System.out.print(">");
            return scanner.next();
        }

        public int chooseCoffee() {
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:");
            System.out.print(">");
            return scanner.nextInt();
        }

        public void displayStatus(Machine machine) {
            System.out.println("The coffee machine has:");
            System.out.println(machine.getWater() + " of water");
            System.out.println(machine.getMilk() + " of milk");
            System.out.println(machine.getCoffeeBeans() + " of coffee beans");
            System.out.println(machine.getCups() + " of disposable cups");
            System.out.println(machine.getMoney() + " of money");
        }

        public List<Integer> fillMenu() {
            List<Integer> fillItems = new ArrayList<>();
            System.out.println("Write how many ml of water do you want to add:");
            System.out.print(">");
            fillItems.add(scanner.nextInt());
            System.out.println("Write how many ml of milk do you want to add:");
            System.out.print(">");
            fillItems.add(scanner.nextInt());
            System.out.println("Write how many grams of coffee beans do you want to add:");
            System.out.print(">");
            fillItems.add(scanner.nextInt());
            System.out.println("Write how many disposable cups of coffee do you want to add:");
            System.out.print(">");
            fillItems.add(scanner.nextInt());
            return fillItems;
        }

        public void takeMoney(Machine machine) {
            System.out.printf("I gave you %d%n", machine.getMoney());
            machine.setMoney(0);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/179/implement
status: Solved
record: 5
